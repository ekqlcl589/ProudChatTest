




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace ChatC2S
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Login_Request(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login_Request;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, ownerUuid);
		ProudChat.CustomMarshaler.Write(__msg, projectUuid);
		ProudChat.CustomMarshaler.Write(__msg, uniqueId);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login_Request, Common.Login_Request);
        }
}

public bool Login_Request(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login_Request;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, ownerUuid);
ProudChat.CustomMarshaler.Write(__msg, projectUuid);
ProudChat.CustomMarshaler.Write(__msg, uniqueId);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login_Request, Common.Login_Request);
        }
}
public bool SendMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, destUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendMsg, Common.SendMsg);
        }
}

public bool SendMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, destUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendMsg, Common.SendMsg);
        }
}
public bool ChannelMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}

public bool ChannelMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}
public bool ChannelJoin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelJoin;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelJoin, Common.ChannelJoin);
        }
}

public bool ChannelJoin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelJoin;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelJoin, Common.ChannelJoin);
        }
}
public bool ChannelLeave(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelLeave;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelLeave, Common.ChannelLeave);
        }
}

public bool ChannelLeave(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelLeave;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelLeave, Common.ChannelLeave);
        }
}
public bool GetChannelList_Request(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.GetChannelList_Request;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_GetChannelList_Request, Common.GetChannelList_Request);
        }
}

public bool GetChannelList_Request(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.GetChannelList_Request;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_GetChannelList_Request, Common.GetChannelList_Request);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="Login_Request";
public const string RmiName_SendMsg="SendMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_ChannelJoin="ChannelJoin";
public const string RmiName_ChannelLeave="ChannelLeave";
public const string RmiName_GetChannelList_Request="GetChannelList_Request";
       
public const string RmiName_First = RmiName_Login_Request;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="";
public const string RmiName_SendMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_ChannelJoin="";
public const string RmiName_ChannelLeave="";
public const string RmiName_GetChannelList_Request="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace ChatS2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool SendMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendMsg, Common.SendMsg);
        }
}

public bool SendMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendMsg, Common.SendMsg);
        }
}
public bool ChannelMsg(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, channelKey);
		ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
		ProudChat.CustomMarshaler.Write(__msg, msg);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}

public bool ChannelMsg(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChannelMsg;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, channelKey);
ProudChat.CustomMarshaler.Write(__msg, srcUniqueID);
ProudChat.CustomMarshaler.Write(__msg, msg);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChannelMsg, Common.ChannelMsg);
        }
}
public bool Login_Response(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Login_Response;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, errorType);
		ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Login_Response, Common.Login_Response);
        }
}

public bool Login_Response(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Login_Response;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, errorType);
ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Login_Response, Common.Login_Response);
        }
}
public bool GetChannelList_Response(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.GetChannelList_Response;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, errorType);
		ProudChat.CustomMarshaler.Write(__msg, channelList);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_GetChannelList_Response, Common.GetChannelList_Response);
        }
}

public bool GetChannelList_Response(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.GetChannelList_Response;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, errorType);
ProudChat.CustomMarshaler.Write(__msg, channelList);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_GetChannelList_Response, Common.GetChannelList_Response);
        }
}
public bool BlockMember_Response(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.BlockMember_Response;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, errorType);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_BlockMember_Response, Common.BlockMember_Response);
        }
}

public bool BlockMember_Response(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.BlockMember_Response;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, errorType);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_BlockMember_Response, Common.BlockMember_Response);
        }
}
public bool CancelBlockMember_Response(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.CancelBlockMember_Response;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, errorType);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_CancelBlockMember_Response, Common.CancelBlockMember_Response);
        }
}

public bool CancelBlockMember_Response(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.CancelBlockMember_Response;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, errorType);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_CancelBlockMember_Response, Common.CancelBlockMember_Response);
        }
}
public bool Event_Filtering(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Event_Filtering;
		__msg.Write(__msgid);
		ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Event_Filtering, Common.Event_Filtering);
        }
}

public bool Event_Filtering(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String filtering)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Event_Filtering;
__msg.Write(__msgid);
ProudChat.CustomMarshaler.Write(__msg, filtering);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Event_Filtering, Common.Event_Filtering);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMsg="SendMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_Login_Response="Login_Response";
public const string RmiName_GetChannelList_Response="GetChannelList_Response";
public const string RmiName_BlockMember_Response="BlockMember_Response";
public const string RmiName_CancelBlockMember_Response="CancelBlockMember_Response";
public const string RmiName_Event_Filtering="Event_Filtering";
       
public const string RmiName_First = RmiName_SendMsg;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_Login_Response="";
public const string RmiName_GetChannelList_Response="";
public const string RmiName_BlockMember_Response="";
public const string RmiName_CancelBlockMember_Response="";
public const string RmiName_Event_Filtering="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

