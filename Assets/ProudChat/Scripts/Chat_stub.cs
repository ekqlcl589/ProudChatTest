




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace ChatC2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool Login_RequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId);  
		public Login_RequestDelegate Login_Request = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String ownerUuid, System.String projectUuid, System.String uniqueId)
		{ 
			return false;
		};
		public delegate bool SendMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg);  
		public SendMsgDelegate SendMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String destUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg);  
		public ChannelMsgDelegate ChannelMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelJoinDelegate ChannelJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool ChannelLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey);  
		public ChannelLeaveDelegate ChannelLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey)
		{ 
			return false;
		};
		public delegate bool GetChannelList_RequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GetChannelList_RequestDelegate GetChannelList_Request = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.Login_Request:
            ProcessReceivedMessage_Login_Request(__msg, pa, hostTag, remote);
            break;
        case Common.SendMsg:
            ProcessReceivedMessage_SendMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelMsg:
            ProcessReceivedMessage_ChannelMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelJoin:
            ProcessReceivedMessage_ChannelJoin(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelLeave:
            ProcessReceivedMessage_ChannelLeave(__msg, pa, hostTag, remote);
            break;
        case Common.GetChannelList_Request:
            ProcessReceivedMessage_GetChannelList_Request(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_Login_Request(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String ownerUuid; ProudChat.CustomMarshaler.Read(__msg,out ownerUuid);	
System.String projectUuid; ProudChat.CustomMarshaler.Read(__msg,out projectUuid);	
System.String uniqueId; ProudChat.CustomMarshaler.Read(__msg,out uniqueId);	
core.PostCheckReadMessage(__msg, RmiName_Login_Request);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=ownerUuid.ToString()+",";
parameterString+=projectUuid.ToString()+",";
parameterString+=uniqueId.ToString()+",";
        NotifyCallFromStub(Common.Login_Request, RmiName_Login_Request,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Login_Request;
        summary.rmiName = RmiName_Login_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Login_Request (remote,ctx , ownerUuid, projectUuid, uniqueId );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Login_Request);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Login_Request;
        summary.rmiName = RmiName_Login_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String destUniqueID; ProudChat.CustomMarshaler.Read(__msg,out destUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_SendMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=destUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.SendMsg, RmiName_SendMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendMsg;
        summary.rmiName = RmiName_SendMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendMsg (remote,ctx , destUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendMsg;
        summary.rmiName = RmiName_SendMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelMsg, RmiName_ChannelMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelMsg (remote,ctx , channelKey, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelJoin, RmiName_ChannelJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelJoin;
        summary.rmiName = RmiName_ChannelJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelJoin (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelJoin;
        summary.rmiName = RmiName_ChannelJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
core.PostCheckReadMessage(__msg, RmiName_ChannelLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
        NotifyCallFromStub(Common.ChannelLeave, RmiName_ChannelLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelLeave;
        summary.rmiName = RmiName_ChannelLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelLeave (remote,ctx , channelKey );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelLeave;
        summary.rmiName = RmiName_ChannelLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetChannelList_Request(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GetChannelList_Request);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GetChannelList_Request, RmiName_GetChannelList_Request,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetChannelList_Request;
        summary.rmiName = RmiName_GetChannelList_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetChannelList_Request (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetChannelList_Request);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetChannelList_Request;
        summary.rmiName = RmiName_GetChannelList_Request;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="Login_Request";
public const string RmiName_SendMsg="SendMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_ChannelJoin="ChannelJoin";
public const string RmiName_ChannelLeave="ChannelLeave";
public const string RmiName_GetChannelList_Request="GetChannelList_Request";
       
public const string RmiName_First = RmiName_Login_Request;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_Login_Request="";
public const string RmiName_SendMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_ChannelJoin="";
public const string RmiName_ChannelLeave="";
public const string RmiName_GetChannelList_Request="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ChatS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool SendMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg);  
		public SendMsgDelegate SendMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String srcUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool ChannelMsgDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg);  
		public ChannelMsgDelegate ChannelMsg = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String channelKey, System.String srcUniqueID, System.String msg)
		{ 
			return false;
		};
		public delegate bool Login_ResponseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.String filtering);  
		public Login_ResponseDelegate Login_Response = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.String filtering)
		{ 
			return false;
		};
		public delegate bool GetChannelList_ResponseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList);  
		public GetChannelList_ResponseDelegate GetChannelList_Response = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType, System.Collections.Generic.List<System.String> channelList)
		{ 
			return false;
		};
		public delegate bool BlockMember_ResponseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType);  
		public BlockMember_ResponseDelegate BlockMember_Response = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
		{ 
			return false;
		};
		public delegate bool CancelBlockMember_ResponseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType);  
		public CancelBlockMember_ResponseDelegate CancelBlockMember_Response = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.ErrorType errorType)
		{ 
			return false;
		};
		public delegate bool Event_FilteringDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering);  
		public Event_FilteringDelegate Event_Filtering = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String filtering)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.SendMsg:
            ProcessReceivedMessage_SendMsg(__msg, pa, hostTag, remote);
            break;
        case Common.ChannelMsg:
            ProcessReceivedMessage_ChannelMsg(__msg, pa, hostTag, remote);
            break;
        case Common.Login_Response:
            ProcessReceivedMessage_Login_Response(__msg, pa, hostTag, remote);
            break;
        case Common.GetChannelList_Response:
            ProcessReceivedMessage_GetChannelList_Response(__msg, pa, hostTag, remote);
            break;
        case Common.BlockMember_Response:
            ProcessReceivedMessage_BlockMember_Response(__msg, pa, hostTag, remote);
            break;
        case Common.CancelBlockMember_Response:
            ProcessReceivedMessage_CancelBlockMember_Response(__msg, pa, hostTag, remote);
            break;
        case Common.Event_Filtering:
            ProcessReceivedMessage_Event_Filtering(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_SendMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String srcUniqueID; ProudChat.CustomMarshaler.Read(__msg,out srcUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_SendMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=srcUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.SendMsg, RmiName_SendMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendMsg;
        summary.rmiName = RmiName_SendMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendMsg (remote,ctx , srcUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendMsg;
        summary.rmiName = RmiName_SendMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChannelMsg(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String channelKey; ProudChat.CustomMarshaler.Read(__msg,out channelKey);	
System.String srcUniqueID; ProudChat.CustomMarshaler.Read(__msg,out srcUniqueID);	
System.String msg; ProudChat.CustomMarshaler.Read(__msg,out msg);	
core.PostCheckReadMessage(__msg, RmiName_ChannelMsg);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channelKey.ToString()+",";
parameterString+=srcUniqueID.ToString()+",";
parameterString+=msg.ToString()+",";
        NotifyCallFromStub(Common.ChannelMsg, RmiName_ChannelMsg,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChannelMsg (remote,ctx , channelKey, srcUniqueID, msg );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChannelMsg);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChannelMsg;
        summary.rmiName = RmiName_ChannelMsg;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Login_Response(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.ErrorType errorType; ProudChat.CustomMarshaler.Read(__msg,out errorType);	
System.String filtering; ProudChat.CustomMarshaler.Read(__msg,out filtering);	
core.PostCheckReadMessage(__msg, RmiName_Login_Response);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=errorType.ToString()+",";
parameterString+=filtering.ToString()+",";
        NotifyCallFromStub(Common.Login_Response, RmiName_Login_Response,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Login_Response;
        summary.rmiName = RmiName_Login_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Login_Response (remote,ctx , errorType, filtering );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Login_Response);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Login_Response;
        summary.rmiName = RmiName_Login_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetChannelList_Response(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.ErrorType errorType; ProudChat.CustomMarshaler.Read(__msg,out errorType);	
System.Collections.Generic.List<System.String> channelList; ProudChat.CustomMarshaler.Read(__msg,out channelList);	
core.PostCheckReadMessage(__msg, RmiName_GetChannelList_Response);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=errorType.ToString()+",";
parameterString+=channelList.ToString()+",";
        NotifyCallFromStub(Common.GetChannelList_Response, RmiName_GetChannelList_Response,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetChannelList_Response;
        summary.rmiName = RmiName_GetChannelList_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetChannelList_Response (remote,ctx , errorType, channelList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetChannelList_Response);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetChannelList_Response;
        summary.rmiName = RmiName_GetChannelList_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BlockMember_Response(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.ErrorType errorType; ProudChat.CustomMarshaler.Read(__msg,out errorType);	
core.PostCheckReadMessage(__msg, RmiName_BlockMember_Response);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=errorType.ToString()+",";
        NotifyCallFromStub(Common.BlockMember_Response, RmiName_BlockMember_Response,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BlockMember_Response;
        summary.rmiName = RmiName_BlockMember_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BlockMember_Response (remote,ctx , errorType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BlockMember_Response);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BlockMember_Response;
        summary.rmiName = RmiName_BlockMember_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CancelBlockMember_Response(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.ErrorType errorType; ProudChat.CustomMarshaler.Read(__msg,out errorType);	
core.PostCheckReadMessage(__msg, RmiName_CancelBlockMember_Response);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=errorType.ToString()+",";
        NotifyCallFromStub(Common.CancelBlockMember_Response, RmiName_CancelBlockMember_Response,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CancelBlockMember_Response;
        summary.rmiName = RmiName_CancelBlockMember_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CancelBlockMember_Response (remote,ctx , errorType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CancelBlockMember_Response);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CancelBlockMember_Response;
        summary.rmiName = RmiName_CancelBlockMember_Response;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Event_Filtering(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String filtering; ProudChat.CustomMarshaler.Read(__msg,out filtering);	
core.PostCheckReadMessage(__msg, RmiName_Event_Filtering);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=filtering.ToString()+",";
        NotifyCallFromStub(Common.Event_Filtering, RmiName_Event_Filtering,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Event_Filtering;
        summary.rmiName = RmiName_Event_Filtering;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Event_Filtering (remote,ctx , filtering );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Event_Filtering);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Event_Filtering;
        summary.rmiName = RmiName_Event_Filtering;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMsg="SendMsg";
public const string RmiName_ChannelMsg="ChannelMsg";
public const string RmiName_Login_Response="Login_Response";
public const string RmiName_GetChannelList_Response="GetChannelList_Response";
public const string RmiName_BlockMember_Response="BlockMember_Response";
public const string RmiName_CancelBlockMember_Response="CancelBlockMember_Response";
public const string RmiName_Event_Filtering="Event_Filtering";
       
public const string RmiName_First = RmiName_SendMsg;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMsg="";
public const string RmiName_ChannelMsg="";
public const string RmiName_Login_Response="";
public const string RmiName_GetChannelList_Response="";
public const string RmiName_BlockMember_Response="";
public const string RmiName_CancelBlockMember_Response="";
public const string RmiName_Event_Filtering="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

